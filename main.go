package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"HeatingEventServiceGo/config"
	"HeatingEventServiceGo/models"
	"HeatingEventServiceGo/routes"
	"HeatingEventServiceGo/socket"

	"github.com/rs/cors"

	"github.com/gorilla/mux"
	socketio "github.com/zishang520/socket.io/servers/socket/v3"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	config.ConnectDB()
	models.DB = config.DB

	// –°–æ–∑–¥–∞—ë–º Socket.IO —Å–µ—Ä–≤–µ—Ä
	socket.Server = socketio.NewServer(nil, nil)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
	socket.Server.On("connection", func(clients ...any) {
		sock := clients[0].(*socketio.Socket)
		log.Printf("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω, ID: %s", sock.Id())

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è "connected" –∫–ª–∏–µ–Ω—Ç—É
		sock.Emit("connected", map[string]interface{}{
			"message": "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É",
			"id":      sock.Id(),
			"time":    time.Now().Format("15:04:05"),
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "message"
		sock.On("message", func(data ...any) {
			if len(data) > 0 {
				log.Printf("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %v", sock.Id(), data[0])
				sock.Emit("message_reply", fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: %v", data[0]))
				// –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
				socket.Server.Emit("new-message", map[string]interface{}{
					"from":    sock.Id(),
					"message": data[0],
					"time":    time.Now().Format("15:04:05"),
				})
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è "test"
		sock.On("test", func(data ...any) {
			if len(data) > 0 {
				log.Printf("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %v", sock.Id(), data[0])
				sock.Emit("test_reply", fmt.Sprintf("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: %v", data[0]))
			}
		})

		// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
		sock.On("disconnect", func(reason ...any) {
			r := "unknown"
			if len(reason) > 0 {
				r = fmt.Sprintf("%v", reason[0])
			}
			log.Printf("üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω, ID: %s, –ü—Ä–∏—á–∏–Ω–∞: %s", sock.Id(), r)
		})
	})

	// HTTP –º–∞—Ä—à—Ä—É—Ç—ã
	router := mux.NewRouter()
	routes.SetupRoutes(router)

	// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
	router.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`{"status":"ok","service":"SocketIOService"}`))
	})

	c := cors.New(cors.Options{
		AllowedOrigins:   []string{"*"},                             // –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ origins
		AllowedMethods:   []string{"GET", "POST", "PUT", "OPTIONS"}, // –î–æ–±–∞–≤–∏–ª–∏ OPTIONS —è–≤–Ω–æ
		AllowedHeaders:   []string{"*"},
		ExposedHeaders:   []string{"Content-Length"},
		AllowCredentials: true,
		Debug:            true, // –í–∫–ª—é—á–∞–µ–º –¥–µ–±–∞–≥ rs/cors (–ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞)
	})

	handler := c.Handler(router)
	// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Socket.IO –∫ HTTP
	http.Handle("/socket.io/", socket.Server.ServeHandler(nil))
	http.Handle("/", c.Handler(handler))

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := os.Getenv("PORT")
	if port == "" {
		port = "5200"
	}
	log.Printf("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
